-- 11) - Valores null (is null)
---------------------------------

use Curso_SqlServer;

sp_tables @table_owner='dbo';
sp_columns libros;
select * from libros;
select * from libros_tmp;

-- Trabajamos con la tabla "libros" de una librería.
-- Eliminamos la tabla "libros", si existe
if object_id('libros') is not null
	drop table libros;

-- Creamos la tabla especificando que los campos "titulo" y "autor" no admitan valores nulos
create table libros(titulo varchar(30) not null, autor varchar(30) not null, editorial varchar(15) null, 
precio float, cantidad int null);
-- Los campos "editorial" y "precio" si permiten valores nulos; el primero, porque lo especificamos 
-- colocando "null" en la definición del campo, el segundo lo asume por defecto. 

-- Agregamos un registro a la tabla con valor nulo para el campo "precio" 
insert into libros(titulo, autor, editorial, precio) values('El aleph', 'Borges', 'Emece', null);
-- Recuerde que el valor "null" no es una cadena de caracteres, por lo tanto no se coloca entre comillas.

-- Ingresamos otro registro, con valor nulo para el campo "editorial", campo que admite valores "null"
insert into libros(titulo, autor, editorial, precio) values('Alicia en el pais', 'Lewis Carroll', null, 0);

-- Veamos lo que sucede si intentamos ingresar el valor "null" en campos que no lo admiten, como "titulo"
insert into libros(titulo, autor, editorial, precio) values(null, 'Borges', 'Siglo XXI', 25);
-- aparece un mensaje y la sentencia no se ejecuta.

-- Para ver cuáles campos admiten valores nulos y cuáles no, empleamos el procedimiento 
-- almacenado "sp_columns"
sp_columns libros;
-- nos muestra muchas columnas, una de ellas tiene el encabezado "IS_NULLABLE", vemos que 
-- aparece "NO" en los campos que no permiten valores nulos y "YES" en los campos que si los permiten.


-- Dijimos que el valor "null" no es lo mismo que una cadena vacía. Vamos a ingresar un 
-- registro con cadena vacía para el campo "editorial"
insert into libros(titulo, autor, editorial, precio) values('Uno', 'Richard Bach', '', 18.50);

-- Ingresamos otro registro, ahora cargamos una cadena vacía en el campo "titulo"
insert into libros(titulo, autor, editorial, precio) values('', 'Richard Bach', 'Planeta', 22);

-- Veamos todos los regiustros ingresados
select * from libros;

-- Recuperemos los registros que contengan el valor "null" en el campo "precio"
select * from libros where precio is null;
-- La sentencia anterior tendrá una salida diferente a la siguiente
select * from libros where precio = 0;
-- Con la primera sentencia veremos los libros cuyo precio es igual a "null" (desconocido); 
-- con la segunda, los libros cuyo precio es 0.

-- Recuperemos los libros cuyo nombre de editorial es "null"
select * from libros where editorial is null;

-- Ahora veamos los libros cuya editorial almacena una cadena vacía
select * from libros where editorial = '';

-- Para recuperar los libros cuyo precio no sea nulo tipeamos
select * from libros where precio is not null;
-- ************************************************* --










-- Una farmacia guarda información referente a sus medicamentos en una tabla llamada "medicamentos".
-- 1- Elimine la tabla, si existe
sp_tables @table_owner='dbo';

if object_id('medicamentos') is not null
	drop table medicamentos;

-- 2- Cree la tabla con la siguiente estructura
create table medicamentos(codigo int not null, nombre varchar(20) not null, laboratorio varchar(20),
precio float, cantidad int not null);

-- 3- Visualice la estructura de la tabla "medicamentos":
sp_columns medicamentos;
-- note que los campos "codigo", "nombre" y "cantidad", en la columna "IS_NULLABLE" aparece "NO" y en 
-- las otras "YES". 


-- 4- Ingrese algunos registros con valores "null" para los campos que lo admitan
insert into medicamentos(codigo, nombre, laboratorio, precio, cantidad) values(1, 'Sertal gotas', null, null, 100); 
insert into medicamentos(codigo, nombre, laboratorio, precio, cantidad) values(2, 'Sertal compuesto', null, 8.90, 150);
insert into medicamentos(codigo, nombre, laboratorio, precio, cantidad) values(3, 'Buscapina', 'Roche', null, 200);

-- 5- Vea todos los registros
select * from medicamentos;


-- 6- Ingrese un registro con valor "0" para el precio y cadena vacía para el laboratorio
insert into medicamentos(codigo, nombre, laboratorio, precio, cantidad) values(4, 'Bayaspirina', '', 0, 150);

-- 7- Ingrese un registro con valor "0" para el código y cantidad y cadena vacía para el nombre
insert into medicamentos(codigo, nombre, laboratorio, precio, cantidad) values(0, '', 'Bayer', 15.60, 0);

-- 8- Muestre todos los registros
select * from medicamentos;

-- 9- Intente ingresar un registro con valor nulo para un campo que no lo admite 
-- (aparece un mensaje de error)
insert into medicamentos(codigo, nombre, laboratorio, precio, cantidad) values(null, 'Amoxidal jarabe', 'Bayer', 25, 120);

-- 10- Recupere los registros que contengan valor "null" en el campo "laboratorio", luego los que 
-- tengan una cadena vacía en el mismo campo. Note que el resultado es diferente.
select * from medicamentos where laboratorio is null;
select * from medicamentos where laboratorio = '';


-- 11- Recupere los registros que contengan valor "null" en el campo "precio", luego los que tengan el 
-- valor 0 en el mismo campo. Note que el resultado es distinto.
select * from medicamentos where precio is null;
select * from medicamentos where precio = 0;


-- 12- Recupere los registros cuyo laboratorio no contenga una cadena vacía, luego los que sean 
-- distintos de "null"
select * from medicamentos where laboratorio <> '';
select * from medicamentos where laboratorio is not null;
-- Note que la salida de la primera sentencia no muestra los registros con cadenas vacías y tampoco los 
-- que tienen valor nulo; el resultado de la segunda sentencia muestra los registros con valor para el 
-- campo laboratorio (incluso cadena vacía).


-- 13- Recupere los registros cuyo precio sea distinto de 0, luego los que sean distintos de "null"
select * from medicamentos where precio <> 0;
select * from medicamentos where precio is not null;
-- Note que la salida de la primera sentencia no muestra los registros con valor 0 y tampoco los que 
-- tienen valor nulo; el resultado de la segunda sentencia muestra los registros con valor para el 
-- campo precio (incluso el valor 0)
-- ************************************************* --











-- Trabaje con la tabla que almacena los datos sobre películas, llamada "peliculas"
-- 1- Elimine la tabla si existe
sp_tables @table_owner='dbo';
sp_columns peliculas;
select * from peliculas;

if object_id('peliculas') is not null
	drop table peliculas;

-- 2- Créela con la siguiente estructura:
create table peliculas(codigo int not null, nombre varchar(20), titulo varchar(40) not null,
actor varchar(20), duracion int, cantidad int);

-- 3- Visualice la estructura de la tabla
sp_columns peliculas;
-- note que el campo "codigo" y "titulo", en la columna "IS_NULLABLE" muestra "NO" y los 
-- otros campos "YES".



-- 4- Ingrese los siguientes registros
insert into peliculas(codigo, titulo, actor, duracion) values(1, 'Mision imposible', 'Tom Cruise', 120);
insert into peliculas(codigo, titulo, actor, duracion) values(2, 'Harry Potter y la piedra filosofal', null, 180);
insert into peliculas(codigo, titulo, actor, duracion) values(3, 'Harry Potter y la camara secreta', 'Daniel R.', null);
insert into peliculas(codigo, titulo, actor, duracion) values(0, 'Mision imposible 2', '', 150);
insert into peliculas(codigo, titulo, actor, duracion) values(4, '', 'L. Di Caprio', 220);
insert into peliculas(codigo, titulo, actor, duracion) values(5, 'Mujer bonita', 'R. Gere-J. Roberts', 0);

-- 5- Recupere todos los registros para ver cómo SQL Server los almacenó
select * from peliculas;

-- 6- Intente ingresar un registro con valor nulo para campos que no lo admiten 
-- (aparece un mensaje de error):
insert into peliculas(codigo, titulo, actor, duracion) values(null, 'Mujer bonita', 'R. Gere-J. Roberts', 190);

-- 7- Muestre los registros con valor nulo en el campo "actor" y luego los que guardan una cadena vacía 

select * from peliculas where actor is null;
select * from peliculas where actor = '';
-- (note que la salida es distinta) (1 registro)


-- 8- Modifique los registros que tengan valor de duración desconocido (nulo) por "120" (1 registro 
-- actualizado)
update peliculas set duracion = 120 where duracion is null;


-- 9- Coloque 'Desconocido' en el campo "actor" en los registros que tengan una cadena vacía en dicho 
-- campo (1 registro afectado)
update peliculas set actor = 'desconocido' where actor = '';



-- 10- Muestre todos los registros. Note que el cambio anterior no afectó a los registros con valor 
-- nulo en el campo "actor".
select * from peliculas;

-- 11- Elimine los registros cuyo título sea una cadena vacía (1 registro)
delete from peliculas where titulo = '';
